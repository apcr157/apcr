% Name: Weipeng ZHOU
% Email Address: ssywz8@nottingham.edu.cn

%% Q1 - VARIABLES [8 MARKS]
clear 

% Define the variable x
x = 1.5;

% a) Calculate a = sin(2x)
a = sin(2*x);
disp(['a = ', num2str(a)]); % Show results

% b) Calculate b = sin^2(x)
b = sin(x)^2;
disp(['b = ', num2str(b)]); % show results

% c) Calculate c = x^5 + 3x^4 + x^3 + x^2/2 + x
c = x^5 + 3*x^4 + x^3 + x^2/2 + x;
disp(['c = ', num2str(c)]); % Show results

% d) Calculate d = exp(sin(x) * cos(x))
d = exp(sin(x) * cos(x));
disp(['d = ', num2str(d)]); % Show results

% e) Calculate e = (x + 1)(x - 1)(x^2 + 1)(x^3)
e = (x + 1) * (x - 1) * (x^2 + 1) * (x^3);
disp(['e = ', num2str(e)]); % Show results

% f) Calculate f = sin(2x) + 2sin^2(x)
% Using the trigonometric equation sin(2x) = 2sin(x)cos(x)
%        Calculations can be simplified：f = 2sin(x)cos(x) + 2sin^2(x) = 2sin(x)(cos(x) + sin(x))
f = 2*sin(x)*(cos(x) + sin(x));
disp(['f = ', num2str(f)]); % Show results

% g) Calculate g = [(sin(2x) + 2sin^2(x)) / (x^5 + 3x^4 + x^3 + x^2/2 + x +
% (x + 1)(x - 1)(x^2 + 1)(x^3))]^2
% Simplify the calculations by using the results for f, as well as the results for e
g = (f / (c + e))^2;
disp(['g = ', num2str(g)]); % Show results


%% Q2 - VECTORS [12 MARKS]
clear

% 1.Create vector x
x = linspace(-2*pi, 2*pi, 100);

% 2. Calculating function values
a = sin(x);
b = cos(x).^2;
c = tan(x);
d = (exp(x) - exp(-x)) / 2; 

% 3. Calculate the mean and standard deviation of b
mean_b = mean(b);
std_b = std(b);

disp(['Mean of b: ', num2str(mean_b)]);
disp(['Standard deviation of b: ', num2str(std_b)]);

% 4. Explain why the mean of b is not strictly equal to 0.5.
% Due to the precision limitations of numerical calculations and the fact that the points generated by the linspace function
% are not necessarily perfectly symmetrically distributed between -2π and 2π.
% resulting in a small difference between the mean value of b and the theoretical value of 0.5.
% Furthermore, the integral of cos^2(x) over a period is x/2 + sin(2x)/4.
% Although the integral of sin(2x)/4 is 0 over the entire period, our interval is not a complete period.
% So it results in a mean not strictly equal to 0.5

% 5. AC circuit problems
peak_current = 0.1; % Peak Current in Amps (A)
resistance = 1000;   % Resistance in Ohms (Ω)

% Generated current value (sine wave)
current = peak_current * sin(x);

% Calculate the root mean square current (Irms)
Irms = sqrt(mean(current.^2));

% Calculate average power
average_power = Irms^2 * resistance;

disp(['Average power: ', num2str(average_power), ' W']);

%% Q3 - SOLVING EQUATIONS [6 MARKS]
clear

% a) Solving for the roots of a quadratic equation
% 24x^2 - 24x - 480 = 0
% Firstly, we can simplify the equation as:x^2 - x - 20 = 0




% Then, using the quadratic formula
a = 1;
b = -1;
c = -20;

root1 = (-b + sqrt(b^2 - 4*a*c)) / (2*a);
root2 = (-b - sqrt(b^2 - 4*a*c)) / (2*a);

disp('Roots using quadratic formula:');
disp([root1, root2]);

% b) Calculate the speed of light and frequency range

% i) Calculating the speed of light
epsilon_0 = 8.85418782e-12; % vacuum dielectric constant
mu_0 = 4 * pi * 1e-7;       % vacuum permeability

c = 1 / sqrt(epsilon_0 * mu_0);
disp(['Speed of light (c): ', num2str(c), ' m/s']);

% ii) Calculated frequency range
lambda_min = 0.6e-6;  % Minimum wavelength (m)
lambda_max = 28e-6;   % Maximum wavelength (m)

f_max = c / lambda_min; % Maximum frequency (Hz)
f_min = c / lambda_max; % Minimum frequency (Hz)

disp(['Frequency range: ', num2str(f_min), ' Hz to ', num2str(f_max), ' Hz']);

%% Q4 - EXAMPLES [12 MARKS]
clear

% a) clear
% Purpose: Clears the variables in the workspace.
% Example:
clear a; % Clear variable a
clear;   % Clear all variables in the workspace

% b) who
% Function: Lists all variable names in the current workspace.
% Example:
a = 1;
b = 'good';
who;     % will display a and b

% c) semicolons after a line (;)
% Function: Suppresses MATLAB output.If a semicolon is added to the end of a line of code, the
%       MATLAB will execute the line of code, but will not display the result in the command window.
% Example:
x = 5;   % The value of x is not displayed in the command window
y = 10;  % The value of y is not displayed in the command window
z = x + y; % The value of z is not displayed in the command window
disp(z) % However, this line will show the value of z

% d) sound
% Function: Plays sound.
% Example:
Fs = 8000;       % Sampling frequency (Hz)
t = 0:1/Fs:1;    % Time vector (1 sec)
f = 440;         % Frequency (Hz) - A4 note
y = sin(2*pi*f*t); % generate a sine wave
% sound(y, Fs);     % Play the sound (A4 notes will be played if the comment is cancelled)
                

% e) roots
% Role: solving roots of polynomial equations。
% Example:
% Solve x^2 - 3x + 2 = 0
coefficients = [1, -3, 2]; % polynomial coefficients 
r = roots(coefficients);   % r will contain two roots: 2 and 1
disp(r);

% f) abs
% Function: Calculate the absolute value or the mode of a complex number.。
% Example:
x = -5;
y = abs(x);    % y will be equal to 5
disp(['y = ', num2str(y)]);

z = 3 + 4i;
w = abs(z);    % w will be equal to 5 (modulus of a complex number).
disp(['w = ', num2str(w)]);


%% Q5 - PROGRAM FLOW [12 MARKS]
clear

% initialisation condition
initial_height = 10000; % Initial height (m)
velocity = 200;       % Descent speed (m/s), assumed constant
time = 0;             % Initial time (s)
delta_t = 2;          % Time step (s)

height = initial_height; % Current height (m)
parachute_deployed = false; % Signs of a deployed parachute
time_to_deploy = -1;      % Parachute deployment time (s), initial value -1 means not deployed

% while loop
while height > 0
    % Calculating new heights
    height = height - velocity * delta_t;

    % update time
    time = time + delta_t;

    % Determining whether to deploy a parachute 
    if ~parachute_deployed && height <= 2700 && height > 0
        disp(['Parachute deployed at time: ', num2str(time), ' s, height: ', num2str(height), ' m']);
        parachute_deployed = true; % Set the flag to ensure that it only expands once
        time_to_deploy = time;     % Record deployment time
    end

    % Determining whether to activate a beacon
    if height <= 0
        disp('Beacon activated.');
        % break; statement to end the loop early
    end
end

% Calculate and output parachute deployment time 

if initial_height > 2700 % Only initial heights greater than 2700 need to be calculated
    if parachute_deployed
      disp(['Time to deploy parachute: ', num2str(time_to_deploy), ' s']);
    else
        disp('Parachute did not deploy before landing.');
    end
elseif initial_height <= 2700 && initial_height > 0
    disp('Parachute is deployed immediately.');
else
    disp('The capsule has already landed.')
end

%% Q6 - FORMAT AND PRINT TEXT TO SCREEN AND LOOPS [13 MARKS]
clear

% Data (can be changed as required)
time_data = [1300, 1600, 1900];
temp_data = [19, 20, 18];
humidity_data = [55, 49, 59];
uv_data = [4, 2, 1];

% Print header information
disp('Data logging initiated - 27/2/2025'); % Date format can be changed on demand
disp('Location - Ningbo');
disp(' '); % blank line

% Cyclic printing of data 
for i = 1:length(time_data)
    % Formatting Strings with sprintf
    time_str = sprintf('Time\t\t%d', time_data(i));
    temp_str = sprintf('Temperature\t%d C', temp_data(i));
    humidity_str = sprintf('Humidity\t%d%%', humidity_data(i)); % for output %
    uv_str = sprintf('UV level\t%d', uv_data(i));

    % ouput
    disp(time_str);
    disp(temp_str);
    disp(humidity_str);
    disp(uv_str);
    disp(' '); % Blank lines between data blocks
end

% Print tail information 
disp('Data logging terminated');

% b) Limitations and recommendations for improvement 
% Major constraints：
% 1. Data is hard-coded in the script.Each time you want to display different data, you need to change the code manually.
% 2. Dates and locations are also hard-coded。
% 3. There is no error handling mechanism.If data is missing or incorrectly formatted, the program may error or produce incorrect output.
% 4. The number of groups of data is fixed and depends on the length of the data array.

% Suggestions for improvement：
% 1. Read data from external files (e.g. CSV, TXT, Excel) or databases.。
% 2. Allows the user to enter data via input (input function) or a graphical interface (GUI).
% 3. Add date and location selection/entry functionality。
% 4. Add data validation and error handling mechanisms to ensure data validity and integrity.
% 5. Use more flexible data structures (such as structured arrays or tables) to store data so that more groups can be added dynamically
%    without modifying the code associated with the for loop.
% 6. Consider separating the data from the formatted output and writing the formatted output as a separate function.

%% Q7 - FOR LOOPS AND DISPLAYING DATA [16 MARKS]
clear

% a) and b) Calculate the Fibonacci series and the golden ratio approximation 
n_terms = 50;
fibonacci = zeros(1, n_terms);       % Pre-allocated memory
golden_ratio_approx = zeros(1, n_terms-1); % Pre-allocated memory, golden ratio approximation is one less than the Fibonacci number.

fibonacci(1) = 0;
fibonacci(2) = 1;

for n = 3:n_terms
    fibonacci(n) = fibonacci(n-1) + fibonacci(n-2);
    golden_ratio_approx(n-1) = fibonacci(n) / fibonacci(n-1); % The golden ratio approximation is indexed by n-1
end

% c) Output to terminal (formatted output) 
disp('Fibonacci sequence and approximations to the golden ratio:');
disp('Index     Fibonacci Number     Golden Ratio Approximation');
for n = 2:n_terms % Starting from n=2, since the 0th term does not have a corresponding golden ratio
     fprintf('%-9d %-19d %.5f\n', n-1, fibonacci(n), golden_ratio_approx(n-1));
end

% d) output (with convergence judgment) 
disp(' '); % blank line
disp('Fibonacci sequence and approximations to the golden ratio (converged):');
disp('Index     Fibonacci Number     Golden Ratio Approximation');

% Special treatment of items 0 and 1
%fprintf('%-9d %-19d %s\n', 0, fibonacci(1), 'N/A'); % No need to output item 0
fprintf('%-9d %-19d %.5f\n', 1, fibonacci(2), golden_ratio_approx(1));

for n = 3:n_terms
    diff_percentage = abs((golden_ratio_approx(n-1) - golden_ratio_approx(n-2)) / golden_ratio_approx(n-2))*100; % 计算百分比差异
    if diff_percentage < 0.1
        break; % Reach convergence condition, exit loop
    end
    fprintf('%-9d %-19d %.5f\n', n-1, fibonacci(n), golden_ratio_approx(n-1));
end

disp('Golden ratio converged to within 0.1%.');


% (d) compared with (c)
% (d) Advantages:
% 1. More efficient: the loop in (d) stops as soon as the approximation of the golden ratio reaches the required precision.
%    Avoids unnecessary computation and output.
% 2. More practical: For practical applications, we usually only need a sufficiently precise value of the golden ratio
%    rather than the whole sequence.
% 3. More resource-saving: For systems with limited storage space, such as embedded, you can avoid calculating and storing large amounts of data.
% (c) Advantages:
% 1. (c) provides the complete sequence, and (c) is more appropriate if the nature of the entire sequence needs to be analyzed.
% 2. Simpler

%% Q8 - USING THE SWITCH STATEMENT [10 MARKS]
clear

% Get the number of pounds entered by the user
gbp_amount = input('Enter the amount in GB Pounds to convert: ');

% Check if the input is valid
if gbp_amount > 0
    % Providing currency options
    choice = menu('Choose a currency to convert to:', 'Euro', 'US Dollars', 'Chinese Yuan', 'Swiss Francs');

    % Conversion based on selection
    switch choice
        case 1 % Euro
            exchange_rate = 1.17;
            currency_name = 'Euros';
        case 2 % US Dollars
            exchange_rate = 1.27;
            currency_name = 'US Dollars';
        case 3 % Chinese' Yuan
            exchange_rate = 9.03;
            currency_name = 'Chinese Yuan';
        case 4 % Swiss Francs
            exchange_rate = 1.09;
            currency_name = 'Swiss Francs';
        otherwise % User cancels or closes the window
            disp('No currency selected.');
            exchange_rate = NaN; % Set to NaN for invalid selection
            currency_name = '';
    end

     % Outputs only when selected
    if ~isnan(exchange_rate)
      converted_amount = gbp_amount * exchange_rate;
      disp([num2str(gbp_amount), ' GB Pounds is ', num2str(converted_amount, '%.2f'), ' ', currency_name]);
    end

elseif gbp_amount <= 0
    % Handling of invalid inputs
    disp('Invalid input. Please enter a positive amount.');
end

%% PRESENTATION AND FORMATTING [11 MARKS]
% You do not need to put anything in this section
% Marks will be given for neat, tidy presentation, commenting
% and remembering to put your name and email address at the top of the
% script